@page "/admin/inventory-history"
@attribute [Authorize(Roles = "Admin, Warehouse")]
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthProvider

<h3 class="mb-4 fw-bold text-primary">
    <i class="bi bi-clock-history me-2"></i>Lịch sử thay đổi tồn kho
</h3>

@if (!string.IsNullOrEmpty(filter.ProductName))
{
    <div class="alert alert-info py-2 px-3 small shadow-sm mb-3">
        <i class="bi bi-funnel-fill me-2"></i>
        Đang xem dữ liệu cho sản phẩm: <strong>@filter.ProductName</strong>
    </div>
}

<!-- BỘ LỌC -->
<div class="card shadow-sm border-0 mb-4">
    <div class="card-header bg-gradient text-white" style="background: linear-gradient(90deg,#007bff,#6610f2);">
        <i class="bi bi-funnel-fill me-2"></i>Bộ lọc nâng cao
    </div>
    <div class="card-body">
        <div class="row g-3 align-items-end">
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Tên sản phẩm</label>
                <InputText class="form-control form-control-sm" @bind-Value="filter.ProductName" placeholder="VD: Bình nước..." />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Kho</label>
                <InputText class="form-control form-control-sm" @bind-Value="filter.WarehouseName" placeholder="VD: Kho Chính..." />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Loại hành động</label>
                <InputSelect class="form-select form-select-sm" @bind-Value="filter.ReasonType">
                    <option value="">-- Tất cả --</option>
                    <option>Nhập hàng</option>
                    <option>Xuất hàng</option>
                    <option>Chuyển kho</option>
                    <option>Chuyển vị trí</option>
                    <option>Điều chỉnh tồn</option>
                </InputSelect>
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Người thao tác</label>
                <InputText class="form-control form-control-sm" @bind-Value="filter.UserName" placeholder="Tên..." />
            </div>
        </div>

        <div class="row g-3 mt-2 align-items-end">
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Từ ngày</label>
                <InputDate class="form-control form-control-sm" @bind-Value="filter.FromDate" />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Đến ngày</label>
                <InputDate class="form-control form-control-sm" @bind-Value="filter.ToDate" />
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-sm btn-primary px-3 me-2" @onclick="ApplyFilter">
                    <i class="bi bi-search me-1"></i>Áp dụng lọc
                </button>
                <button class="btn btn-sm btn-outline-secondary px-3" @onclick="ClearFilter">
                    <i class="bi bi-x-circle me-1"></i>Xóa lọc
                </button>
            </div>
        </div>
    </div>
</div>

@if (isLoading)
{
    <LoadingSpinner />
}
else if (logs == null || logs.Count == 0)
{
    <div class="alert alert-warning">Không tìm thấy dữ liệu tồn kho phù hợp.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-bordered align-middle shadow-sm">
            <thead class="table-primary">
                <tr class="text-center align-middle">
                    <th>Thời gian</th>
                    <th>Sản phẩm</th>
                    <th>Kho / Vị trí</th>
                    <th>Loại hành động</th>
                    <th class="text-end">Tồn cũ</th>
                    <th class="text-end">Thay đổi</th>
                    <th class="text-end">Tồn mới</th>
                    <th>Người thao tác</th>
                    <th>Ghi chú</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in logs)
                {
                    <tr>
                        <td>@log.Timestamp.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>@log.ProductName</td>
                        <td>@($"{log.WarehouseName} - {log.LocationCode}")</td>
                        <td class="text-center">
                            <span class="badge @GetReasonBadgeClass(log.Reason)">
                                <i class="@GetReasonIcon(log.Reason) me-1"></i>@log.Reason
                            </span>
                        </td>
                        <td class="text-end text-muted">@log.OldQuantity</td>
                        <td class="text-end @(log.QuantityChange >= 0 ? "text-success fw-bold" : "text-danger fw-bold")">
                            @log.QuantityChange.ToString("+#;-#;0")
                        </td>
                        <td class="text-end fw-semibold">@log.NewQuantity</td>
                        <td>@log.UserName</td>
                        <td>@log.Note</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<InventoryLogViewModel>? logs;
    private bool isLoading = true;
    private FilterModel filter = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ProductName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Lấy query string từ URL nếu có
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var name = query["productName"];

        if (!string.IsNullOrEmpty(name))
            filter.ProductName = name;

        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        isLoading = true;
        var query = DbContext.InventoryLogs
            .Include(l => l.Product)
            .OrderByDescending(l => l.Timestamp)
            .AsQueryable();

        if (!string.IsNullOrWhiteSpace(filter.ProductName))
            query = query.Where(l => l.Product!.Name.Contains(filter.ProductName));

        if (!string.IsNullOrWhiteSpace(filter.WarehouseName))
            query = query.Where(l => l.Reason.Contains($"Kho:{filter.WarehouseName}"));

        if (!string.IsNullOrWhiteSpace(filter.ReasonType))
            query = query.Where(l => l.Reason.Contains(filter.ReasonType));

        if (!string.IsNullOrWhiteSpace(filter.UserName))
            query = query.Where(l => l.Reason.Contains($"User:{filter.UserName}"));

        if (filter.FromDate.HasValue)
            query = query.Where(l => l.Timestamp >= filter.FromDate.Value);

        if (filter.ToDate.HasValue)
            query = query.Where(l => l.Timestamp <= filter.ToDate.Value);

        var list = await query.ToListAsync();
        logs = list.Select(l => ParseLog(l)).ToList();
        isLoading = false;
    }

    private InventoryLogViewModel ParseLog(InventoryLog l)
    {
        string warehouse = "", location = "", user = "", note = "", reasonType = l.Reason;
        int oldQty = 0;

        var parts = l.Reason.Split('|', StringSplitOptions.TrimEntries);
        foreach (var p in parts)
        {
            if (p.StartsWith("Kho:")) warehouse = p.Replace("Kho:", "").Trim();
            else if (p.StartsWith("Vị trí:")) location = p.Replace("Vị trí:", "").Trim();
            else if (p.StartsWith("User:")) user = p.Replace("User:", "").Trim();
            else if (p.StartsWith("Ghi chú:")) note = p.Replace("Ghi chú:", "").Trim();
            else if (p.StartsWith("Loại:")) reasonType = p.Replace("Loại:", "").Trim();
            else if (p.StartsWith("Tồn cũ:")) int.TryParse(p.Replace("Tồn cũ:", "").Trim(), out oldQty);
        }

        return new InventoryLogViewModel
        {
            Timestamp = l.Timestamp,
            ProductName = l.Product?.Name ?? "(Không xác định)",
            WarehouseName = warehouse,
            LocationCode = location,
            Reason = reasonType,
            OldQuantity = oldQty,
            QuantityChange = l.QuantityChange,
            NewQuantity = l.NewQuantity,
            UserName = string.IsNullOrEmpty(user) ? "Không rõ" : user,
            Note = note
        };
    }

    private string GetReasonBadgeClass(string reason) => reason switch
    {
        var r when r.Contains("Nhập") => "bg-success",
        var r when r.Contains("Xuất") => "bg-danger",
        var r when r.Contains("Chuyển") => "bg-warning text-dark",
        var r when r.Contains("Điều chỉnh") => "bg-info text-dark",
        _ => "bg-secondary"
    };

    private string GetReasonIcon(string reason) => reason switch
    {
        var r when r.Contains("Nhập") => "bi bi-box-arrow-in-down",
        var r when r.Contains("Xuất") => "bi bi-box-arrow-up",
        var r when r.Contains("Chuyển") => "bi bi-arrow-left-right",
        var r when r.Contains("Điều chỉnh") => "bi bi-pencil-square",
        _ => "bi bi-info-circle"
    };

    private async Task ApplyFilter() => await LoadLogs();
    private async Task ClearFilter() { filter = new(); await LoadLogs(); }

    public class InventoryLogViewModel
    {
        public DateTime Timestamp { get; set; }
        public string ProductName { get; set; } = "";
        public string WarehouseName { get; set; } = "";
        public string LocationCode { get; set; } = "";
        public string Reason { get; set; } = "";
        public int OldQuantity { get; set; }
        public int QuantityChange { get; set; }
        public int NewQuantity { get; set; }
        public string UserName { get; set; } = "";
        public string Note { get; set; } = "";
    }

    public class FilterModel
    {
        public string? ProductName { get; set; }
        public string? WarehouseName { get; set; }
        public string? ReasonType { get; set; }
        public string? UserName { get; set; }
        public DateTime? FromDate { get; set; }
        public DateTime? ToDate { get; set; }
    }
}
