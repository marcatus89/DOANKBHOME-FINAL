@page "/admin/inventory"
@attribute [Authorize(Roles = "Admin, Warehouse")]
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject ToastService ToastSvc
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Nav

<h3 class="fw-bold text-primary mb-4">
    <i class="bi bi-box-seam me-2"></i>T·ªïng quan T·ªìn kho
</h3>

<!-- üîé B·ªô l·ªçc -->
<div class="card shadow-sm border-0 mb-4">
    <div class="card-header bg-primary text-white">
        <i class="bi bi-funnel me-2"></i>B·ªô l·ªçc t√¨m ki·∫øm
    </div>
    <div class="card-body">
        <div class="row g-3 align-items-end">
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">T√™n s·∫£n ph·∫©m</label>
                <InputText class="form-control form-control-sm" @bind-Value="filter.ProductName" placeholder="VD: B√¨nh n∆∞·ªõc..." />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Kho</label>
                <InputText class="form-control form-control-sm" @bind-Value="filter.WarehouseName" placeholder="VD: Kho Ch√≠nh..." />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">V·ªã tr√≠</label>
                <InputText class="form-control form-control-sm" @bind-Value="filter.LocationCode" placeholder="VD: A1-01..." />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">S·ªë phi·∫øu nh·∫≠p</label>
                <InputText class="form-control form-control-sm" @bind-Value="filter.PurchaseOrderNumber" placeholder="VD: PO-001..." />
            </div>
        </div>

        <div class="row g-3 align-items-end mt-2">
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">T·ª´ ng√†y nh·∫≠p</label>
                <InputDate class="form-control form-control-sm" @bind-Value="filter.FromDate" />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">ƒê·∫øn ng√†y nh·∫≠p</label>
                <InputDate class="form-control form-control-sm" @bind-Value="filter.ToDate" />
            </div>
            <div class="col-md-6 text-end">
                <div class="d-flex justify-content-end gap-2">
                    <button class="btn btn-sm btn-primary" @onclick="ApplyFilter">
                        <i class="bi bi-search me-1"></i>L·ªçc
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ClearFilter">
                        <i class="bi bi-x-circle me-1"></i>X√≥a l·ªçc
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (isLoading)
{
    <LoadingSpinner />
}
else if (inventoryItems == null || !inventoryItems.Any())
{
    <div class="alert alert-warning">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover align-middle shadow-sm">
            <thead class="table-light">
                <tr class="text-center">
                    <th>S·∫£n ph·∫©m</th>
                    <th>Kho</th>
                    <th>V·ªã tr√≠</th>
                    <th>Phi·∫øu nh·∫≠p</th>
                    <th>Th·ªùi gian nh·∫≠p</th>
                    <th class="text-center">S·ªë l∆∞·ª£ng</th>
                    <th>H√†nh ƒë·ªông</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in inventoryItems)
                {
                    <tr>
                        <td>@item.ProductName</td>
                        <td>@item.WarehouseName</td>
                        <td>@item.LocationCode</td>
                        <td>@(item.PurchaseOrderNumber ?? "-")</td>
                        <td>@(item.ReceivedDate?.ToString("dd/MM/yyyy HH:mm") ?? "-")</td>
                        <td class="text-center">@item.Quantity</td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-success" @onclick="() => OpenTransferModal(item)">
                                <i class="bi bi-arrow-left-right me-1"></i> Chuy·ªÉn kho
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- üß≠ Modal chuy·ªÉn kho -->
<div class="modal fade" id="transferStockModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">
                    <i class="bi bi-arrow-left-right me-2"></i>Chuy·ªÉn kho
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            @if (itemToTransfer != null)
            {
                <div class="modal-body">
                    <p><strong>S·∫£n ph·∫©m:</strong> @itemToTransfer.ProductName</p>
                    <p><strong>Kho hi·ªán t·∫°i:</strong> @itemToTransfer.WarehouseName - @itemToTransfer.LocationCode</p>
                    <p><strong>T·ªìn hi·ªán t·∫°i:</strong> @itemToTransfer.Quantity</p>

                    <div class="mb-3">
                        <label class="form-label fw-semibold">S·ªë l∆∞·ª£ng c·∫ßn chuy·ªÉn</label>
                        <InputNumber class="form-control" @bind-Value="transferModel.QuantityToMove" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-semibold">Kho ƒë√≠ch</label>
                        <select class="form-select" @onchange="OnTargetWarehouseChanged">
                            <option value="0">-- Ch·ªçn kho ƒë√≠ch --</option>
                            @foreach (var wh in allWarehouses ?? new())
                            {
                                <option value="@wh.Id">@wh.Name</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-semibold">V·ªã tr√≠ ƒë√≠ch</label>
                        <select class="form-select" @bind="transferModel.TargetLocationId">
                            <option value="0">-- Ch·ªçn v·ªã tr√≠ ƒë√≠ch --</option>
                            @foreach (var loc in targetLocations ?? new())
                            {
                                <option value="@loc.Id">@loc.Code</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
                    <button class="btn btn-primary" @onclick="HandleTransfer">
                        <i class="bi bi-check-circle me-1"></i>X√°c nh·∫≠n
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<InventoryItemViewModel>? inventoryItems;
    private InventoryItemViewModel? itemToTransfer;
    private TransferViewModel transferModel = new();
    private List<Warehouse>? allWarehouses;
    private List<Location>? targetLocations;
    private InventoryFilter filter = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        allWarehouses = await DbContext.Warehouses.ToListAsync();

        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var product = query["productName"];
        if (!string.IsNullOrEmpty(product))
            filter.ProductName = product;

        await LoadInventory();
    }

    private async Task LoadInventory()
    {
        isLoading = true;

        var query = DbContext.StockLevels
            .Include(sl => sl.Product)
            .Include(sl => sl.Location)!.ThenInclude(l => l.Warehouse)
            .Include(sl => sl.PurchaseOrderItem)!.ThenInclude(poi => poi.PurchaseOrder)
            .Where(sl => sl.Quantity > 0);

        if (!string.IsNullOrWhiteSpace(filter.ProductName))
            query = query.Where(sl => EF.Functions.Like(sl.Product!.Name, $"%{filter.ProductName}%"));
        if (!string.IsNullOrWhiteSpace(filter.WarehouseName))
            query = query.Where(sl => EF.Functions.Like(sl.Location!.Warehouse!.Name, $"%{filter.WarehouseName}%"));
        if (!string.IsNullOrWhiteSpace(filter.LocationCode))
            query = query.Where(sl => EF.Functions.Like(sl.Location!.Code, $"%{filter.LocationCode}%"));
        if (!string.IsNullOrWhiteSpace(filter.PurchaseOrderNumber))
            query = query.Where(sl => sl.PurchaseOrderItem!.PurchaseOrder!.PurchaseOrderNumber.Contains(filter.PurchaseOrderNumber));

        if (filter.FromDate.HasValue)
            query = query.Where(sl => sl.ReceivedDate >= filter.FromDate.Value);
        if (filter.ToDate.HasValue)
            query = query.Where(sl => sl.ReceivedDate <= filter.ToDate.Value);

        inventoryItems = await query
            .Select(sl => new InventoryItemViewModel
            {
                ProductId = sl.ProductId,
                ProductName = sl.Product!.Name,
                StockLevelId = sl.Id,
                WarehouseName = sl.Location!.Warehouse!.Name,
                LocationId = sl.LocationId,
                LocationCode = sl.Location.Code,
                Quantity = sl.Quantity,
                PurchaseOrderNumber = sl.PurchaseOrderItem!.PurchaseOrder!.PurchaseOrderNumber,
                ReceivedDate = sl.ReceivedDate
            })
            .OrderBy(i => i.ProductName)
            .ToListAsync();

        isLoading = false;
    }

    private async Task ApplyFilter()
    {
        await LoadInventory();
        ToastSvc.ShowToast("ƒê√£ √°p d·ª•ng b·ªô l·ªçc!", ToastLevel.Info);
    }

    private async Task ClearFilter()
    {
        filter = new();
        await LoadInventory();
        ToastSvc.ShowToast("ƒê√£ x√≥a b·ªô l·ªçc!", ToastLevel.Info);
    }

    private async Task OpenTransferModal(InventoryItemViewModel item)
    {
        itemToTransfer = item;
        transferModel = new TransferViewModel();
        targetLocations = null;
        await JSRuntime.InvokeVoidAsync("showModal", "#transferStockModal");
    }

    private async Task OnTargetWarehouseChanged(ChangeEventArgs e)
    {
        var id = int.Parse(e.Value?.ToString() ?? "0");
        transferModel.TargetWarehouseId = id;
        targetLocations = await DbContext.Locations
            .Include(l => l.Warehouse)
            .Where(l => l.WarehouseId == id)
            .ToListAsync();
    }

    private async Task HandleTransfer()
    {
        if (itemToTransfer == null || transferModel.QuantityToMove <= 0 || transferModel.TargetLocationId == 0)
        {
            ToastSvc.ShowToast("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin chuy·ªÉn kho.", ToastLevel.Warning);
            return;
        }

        var sourceStock = await DbContext.StockLevels
            .Include(sl => sl.Location)!.ThenInclude(l => l.Warehouse)
            .FirstOrDefaultAsync(sl => sl.Id == itemToTransfer.StockLevelId);

        if (sourceStock == null)
        {
            ToastSvc.ShowToast("Kh√¥ng t√¨m th·∫•y ngu·ªìn t·ªìn kho.", ToastLevel.Error);
            return;
        }

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User?.Identity?.Name ?? "Kh√¥ng r√µ";

        // ‚úÖ Ghi log kho ngu·ªìn
        int oldSourceQty = sourceStock.Quantity;
        sourceStock.Quantity -= transferModel.QuantityToMove;

        DbContext.InventoryLogs.Add(new InventoryLog
        {
            ProductId = itemToTransfer.ProductId,
            QuantityChange = -transferModel.QuantityToMove,
            NewQuantity = sourceStock.Quantity,
            Timestamp = DateTime.Now,
            Reason = $"Lo·∫°i:Chuy·ªÉn kho | Kho:{sourceStock.Location!.Warehouse!.Name} | V·ªã tr√≠:{sourceStock.Location.Code} | User:{userEmail} | T·ªìn c≈©:{oldSourceQty} | Ghi ch√∫:Chuy·ªÉn ƒëi"
        });

        // ‚úÖ Ghi log kho ƒë√≠ch
        var targetStock = await DbContext.StockLevels
            .Include(sl => sl.Location)!.ThenInclude(l => l.Warehouse)
            .FirstOrDefaultAsync(sl => sl.ProductId == itemToTransfer.ProductId && sl.LocationId == transferModel.TargetLocationId);

        int oldTargetQty = 0;
        if (targetStock != null)
        {
            oldTargetQty = targetStock.Quantity;
            targetStock.Quantity += transferModel.QuantityToMove;
        }
        else
        {
            oldTargetQty = 0;
            targetStock = new StockLevel
            {
                ProductId = itemToTransfer.ProductId,
                LocationId = transferModel.TargetLocationId,
                Quantity = transferModel.QuantityToMove,
                ReceivedDate = DateTime.UtcNow
            };
            DbContext.StockLevels.Add(targetStock);
        }

        DbContext.InventoryLogs.Add(new InventoryLog
        {
            ProductId = itemToTransfer.ProductId,
            QuantityChange = transferModel.QuantityToMove,
            NewQuantity = targetStock.Quantity,
            Timestamp = DateTime.Now,
            Reason = $"Lo·∫°i:Chuy·ªÉn kho | Kho:{targetStock.Location!.Warehouse!.Name} | V·ªã tr√≠:{targetStock.Location.Code} | User:{userEmail} | T·ªìn c≈©:{oldTargetQty} | Ghi ch√∫:Nh·∫≠n h√†ng"
        });

        await DbContext.SaveChangesAsync();
        await JSRuntime.InvokeVoidAsync("hideModal", "#transferStockModal");
        ToastSvc.ShowToast("‚úÖ Chuy·ªÉn kho th√†nh c√¥ng & ƒë√£ ghi l·ªãch s·ª≠ t·ªìn kho!", ToastLevel.Success);
        await LoadInventory();
    }

    // --- Models ---
    public class InventoryItemViewModel
    {
        public int ProductId { get; set; }
        public string? ProductName { get; set; }
        public int StockLevelId { get; set; }
        public string? WarehouseName { get; set; }
        public int LocationId { get; set; }
        public string? LocationCode { get; set; }
        public int Quantity { get; set; }
        public string? PurchaseOrderNumber { get; set; }
        public DateTime? ReceivedDate { get; set; }
    }

    public class TransferViewModel
    {
        public int QuantityToMove { get; set; }
        public int TargetWarehouseId { get; set; }
        public int TargetLocationId { get; set; }
    }

    public class InventoryFilter
    {
        public string? ProductName { get; set; }
        public string? WarehouseName { get; set; }
        public string? LocationCode { get; set; }
        public string? PurchaseOrderNumber { get; set; }
        public DateTime? FromDate { get; set; }
        public DateTime? ToDate { get; set; }
    }
}
