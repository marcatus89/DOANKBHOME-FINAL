@page "/admin/orders"
@attribute [Authorize(Roles = "Admin, Sales, Accounting, Warehouse, Logistics")]
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3 class="mb-3 text-primary fw-bold">
    <i class="bi bi-receipt-cutoff me-2"></i>Quản lý Đơn hàng
</h3>

<!-- BỘ LỌC -->
<div class="card shadow-sm border-0 mb-4">
    <div class="card-header bg-gradient text-white" style="background: linear-gradient(90deg,#007bff,#6610f2);">
        <i class="bi bi-funnel-fill me-2"></i>Bộ lọc nâng cao
    </div>
    <div class="card-body">
        <div class="row g-3 align-items-end">
            <div class="col-md-2">
                <label class="form-label fw-semibold text-secondary">ID Đơn hàng</label>
                <InputNumber class="form-control form-control-sm" @bind-Value="filter.OrderId" placeholder="VD: 123" />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Tên khách hàng</label>
                <InputText class="form-control form-control-sm" @bind-Value="filter.CustomerName" placeholder="VD: Nguyễn Văn A..." />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Từ ngày</label>
                <InputDate class="form-control form-control-sm" @bind-Value="filter.FromDate" />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Đến ngày</label>
                <InputDate class="form-control form-control-sm" @bind-Value="filter.ToDate" />
            </div>
        </div>

        <div class="row g-3 mt-2 align-items-end">
            <div class="col-md-2">
                <label class="form-label fw-semibold text-secondary">Tổng tiền từ</label>
                <InputNumber class="form-control form-control-sm" @bind-Value="filter.MinTotal" />
            </div>
            <div class="col-md-2">
                <label class="form-label fw-semibold text-secondary">Đến</label>
                <InputNumber class="form-control form-control-sm" @bind-Value="filter.MaxTotal" />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">Trạng thái</label>
                <InputSelect class="form-select form-select-sm" @bind-Value="filter.Status">
                    <option value="">-- Tất cả --</option>
                    <option>Chờ xác nhận</option>
                    <option>Chờ thanh toán</option>
                    <option>Đã thanh toán</option>
                    <option>Sẵn sàng giao hàng</option>
                    <option>Đang giao</option>
                    <option>Hoàn thành</option>
                    <option>Đã hủy</option>
                </InputSelect>
            </div>
            <div class="col-md-5 text-end">
                <button class="btn btn-sm btn-primary px-3 me-2" @onclick="ApplyFilter">
                    <i class="bi bi-search me-1"></i>Tìm kiếm
                </button>
                <button class="btn btn-sm btn-outline-secondary px-3" @onclick="ClearFilter">
                    <i class="bi bi-x-circle me-1"></i>Xóa lọc
                </button>
            </div>
        </div>
    </div>
</div>

@if (orderList == null)
{
    <LoadingSpinner />
}
else if (!orderList.Any())
{
    <div class="alert alert-info mt-4">
        Không có đơn hàng nào phù hợp với bộ lọc hiện tại.
    </div>
}
else
{
    <table class="table table-hover align-middle shadow-sm">
        <thead class="table-primary">
            <tr class="text-center">
                <th>ID</th>
                <th>Khách hàng</th>
                <th>Ngày đặt</th>
                <th>Tổng tiền</th>
                <th>Trạng thái</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orderList)
            {
                <tr>
                    <td class="text-center fw-semibold">@order.Id</td>
                    <td>@order.CustomerName</td>
                    <td>@order.OrderDate.ToString("dd/MM/yyyy HH:mm")</td>
                    <td class="text-end fw-semibold">@order.TotalAmount.ToString("N0") VNĐ</td>
                    <td class="text-center">
                        <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
                    </td>
                    <td class="text-center">
                        <a href="@($"/admin/orders/{order.Id}")" class="btn btn-sm btn-outline-primary">
                            <i class="bi bi-eye"></i> Xem chi tiết
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Order>? orderList;
    private OrderFilter filter = new();

    public class OrderFilter
    {
        public int? OrderId { get; set; }
        public string? CustomerName { get; set; }
        public DateTime? FromDate { get; set; }
        public DateTime? ToDate { get; set; }
        public decimal? MinTotal { get; set; }
        public decimal? MaxTotal { get; set; }
        public string? Status { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var query = DbContext.Orders.AsQueryable();

        // Quyền hạn theo vai trò
        if (!user.IsInRole("Admin"))
        {
            var allowedStatuses = new HashSet<string>();
            if (user.IsInRole("Sales")) allowedStatuses.Add("Chờ xác nhận");
            if (user.IsInRole("Accounting")) allowedStatuses.Add("Chờ thanh toán");
            if (user.IsInRole("Warehouse")) allowedStatuses.Add("Đã thanh toán");
            if (user.IsInRole("Logistics"))
            {
                allowedStatuses.Add("Sẵn sàng giao hàng");
                allowedStatuses.Add("Đang giao");
            }
            if (allowedStatuses.Any())
                query = query.Where(o => allowedStatuses.Contains(o.Status));
            else
                query = query.Where(o => false);
        }

        // Áp dụng bộ lọc
        if (filter.OrderId.HasValue)
            query = query.Where(o => o.Id == filter.OrderId.Value);

        if (!string.IsNullOrWhiteSpace(filter.CustomerName))
            query = query.Where(o => o.CustomerName.Contains(filter.CustomerName));

        if (filter.FromDate.HasValue)
            query = query.Where(o => o.OrderDate >= filter.FromDate.Value);

        if (filter.ToDate.HasValue)
            query = query.Where(o => o.OrderDate <= filter.ToDate.Value);

        if (filter.MinTotal.HasValue)
            query = query.Where(o => o.TotalAmount >= filter.MinTotal.Value);

        if (filter.MaxTotal.HasValue)
            query = query.Where(o => o.TotalAmount <= filter.MaxTotal.Value);

        if (!string.IsNullOrWhiteSpace(filter.Status))
            query = query.Where(o => o.Status == filter.Status);

        orderList = await query.OrderByDescending(o => o.OrderDate).ToListAsync();
    }

    private async Task ApplyFilter() => await LoadOrders();

    private async Task ClearFilter()
    {
        filter = new();
        await LoadOrders();
    }

    private string GetStatusBadgeClass(string status) => status switch
    {
        "Hoàn thành" => "bg-success",
        "Đã hủy" => "bg-danger",
        "Đang giao" => "bg-primary",
        "Sẵn sàng giao hàng" => "bg-warning text-dark",
        "Chờ thanh toán" => "bg-info text-dark",
        "Chờ xác nhận" => "bg-secondary",
        _ => "bg-secondary"
    };
}
