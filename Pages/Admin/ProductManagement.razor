@page "/admin/products"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject ToastService ToastSvc

<h3 class="fw-bold text-primary mb-4">
    <i class="bi bi-box-seam me-2"></i>Qu·∫£n l√Ω S·∫£n ph·∫©m
</h3>

<!-- N√∫t th√™m s·∫£n ph·∫©m -->
<a href="/admin/products/add" class="btn btn-primary mb-3">
    <i class="bi bi-plus-circle me-1"></i> Th√™m s·∫£n ph·∫©m m·ªõi
</a>

<!-- üîé B·ªô l·ªçc t√¨m ki·∫øm -->
<div class="card shadow-sm mb-4 border-0">
    <div class="card-header bg-primary text-white">
        <i class="bi bi-funnel me-2"></i>B·ªô l·ªçc t√¨m ki·∫øm
    </div>
    <div class="card-body">
        <div class="row g-3 align-items-end">
            <div class="col-md-3">
                <label class="form-label fw-semibold text-secondary">T√™n s·∫£n ph·∫©m</label>
                <InputText class="form-control form-control-sm" @bind-Value="filter.Name" placeholder="Nh·∫≠p t√™n..." />
            </div>
            <div class="col-md-2">
                <label class="form-label fw-semibold text-secondary">Gi√° t·ª´</label>
                <InputNumber class="form-control form-control-sm" @bind-Value="filter.MinPrice" />
            </div>
            <div class="col-md-2">
                <label class="form-label fw-semibold text-secondary">ƒê·∫øn</label>
                <InputNumber class="form-control form-control-sm" @bind-Value="filter.MaxPrice" />
            </div>
            <div class="col-md-2">
                <label class="form-label fw-semibold text-secondary">T·ªìn kho t·ªëi thi·ªÉu</label>
                <InputNumber class="form-control form-control-sm" @bind-Value="filter.MinStock" />
            </div>
            <div class="col-md-2">
                <label class="form-label fw-semibold text-secondary">Tr·∫°ng th√°i</label>
                <select class="form-select form-select-sm" @bind="filter.Status">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="true">ƒêang hi·ªÉn th·ªã</option>
                    <option value="false">·∫®n</option>
                </select>
            </div>
            <div class="col-md-1 text-end">
                <button class="btn btn-sm btn-primary w-100" @onclick="ApplyFilter">
                    L·ªçc
                </button>
            </div>
        </div>
    </div>
</div>

@if (productList == null)
{
    <LoadingSpinner />
}
else if (!productList.Any())
{
    <div class="alert alert-info mt-4">
        Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc.
    </div>
}
else
{
    <table class="table table-hover align-middle shadow-sm">
        <thead class="table-light">
            <tr class="text-center">
                <th>T√™n s·∫£n ph·∫©m</th>
                <th>T·ªìn kho kh·∫£ d·ª•ng</th>
                <th>Gi√° b√°n</th>
                <th>Tr·∫°ng th√°i ƒëƒÉng</th>
                <th>H√†nh ƒë·ªông</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productList)
            {
                <tr>
                    <td class="text-start">
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" alt="@product.Name"
                                     class="me-2 rounded shadow-sm"
                                     style="width: 45px; height: 45px; object-fit: cover;" />
                            }
                            <span class="fw-semibold">@product.Name</span>
                        </div>
                    </td>

                    <td class="text-center">
                        @if (product.SellableStock == 0)
                        {
                            <span class="badge bg-danger">H·∫øt h√†ng</span>
                        }
                        else if (product.SellableStock < 10)
                        {
                            <span class="badge bg-warning text-dark">S·∫Øp h·∫øt (@product.SellableStock)</span>
                        }
                        else
                        {
                            <span>@product.SellableStock</span>
                        }
                    </td>

                    <td class="text-end">@product.Price.ToString("N0") ‚Ç´</td>

                    <!-- üü¢ Tr·∫°ng th√°i ƒëƒÉng -->
                    <td class="text-center">
                        <div class="d-flex flex-column align-items-center">
                            <div class="form-check mb-1">
                                <input type="checkbox" class="form-check-input"
                                       checked="@product.IsPublished"
                                       @onchange="async (e) => await TogglePublish(product.Id, (bool)e.Value)" />
                            </div>
                            <br>
                            <small class="text-muted">
                                @(product.IsPublished ? "ƒêang hi·ªÉn th·ªã" : "·∫®n")
                            </small>
                        </div>
                    </td>

                    <!-- ‚öôÔ∏è H√†nh ƒë·ªông -->
                    <td class="text-end">
                        <a href="@($"admin/products/edit/{product.Id}")" class="btn btn-sm btn-secondary me-1">
                            <i class="bi bi-pencil-square"></i> S·ª≠a
                        </a>
                        <a href="@($"admin/inventory-history/{product.Id}")" class="btn btn-sm btn-info me-1">
                            <i class="bi bi-clock-history"></i> L·ªãch s·ª≠
                        </a>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.Id)">
                            <i class="bi bi-trash"></i> X√≥a
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product>? productList;
    private ProductFilter filter = new();

    #region Filter Model
    public class ProductFilter
    {
        public string? Name { get; set; }
        public decimal? MinPrice { get; set; }
        public decimal? MaxPrice { get; set; }
        public int? MinStock { get; set; }
        public string? Status { get; set; } // "true" / "false"
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        var query = DbContext.Products
            .Include(p => p.StockLevels)
                .ThenInclude(sl => sl.Location)
                .ThenInclude(l => l!.Warehouse)
            .AsQueryable();

        // √Åp d·ª•ng b·ªô l·ªçc
        if (!string.IsNullOrWhiteSpace(filter.Name))
            query = query.Where(p => p.Name!.Contains(filter.Name));

        if (filter.MinPrice.HasValue)
            query = query.Where(p => p.Price >= filter.MinPrice.Value);

        if (filter.MaxPrice.HasValue)
            query = query.Where(p => p.Price <= filter.MaxPrice.Value);

        if (filter.MinStock.HasValue)
            query = query.Where(p => p.StockLevels.Sum(sl => sl.Quantity) >= filter.MinStock.Value);

        if (!string.IsNullOrEmpty(filter.Status))
        {
            bool isPublished = bool.Parse(filter.Status);
            query = query.Where(p => p.IsPublished == isPublished);
        }

        productList = await query.OrderBy(p => p.Name).ToListAsync();
    }

    private async Task ApplyFilter()
    {
        await LoadProducts();
    }

    private async Task TogglePublish(int productId, bool isPublished)
    {
        var product = await DbContext.Products.FindAsync(productId);
        if (product != null)
        {
            product.IsPublished = isPublished;
            await DbContext.SaveChangesAsync();

            var message = isPublished
                ? $"‚úÖ {product.Name} ƒë√£ ƒë∆∞·ª£c ƒëƒÉng b√°n tr√™n website."
                : $"üö´ {product.Name} ƒë√£ ƒë∆∞·ª£c ·∫©n kh·ªèi website.";
            var level = isPublished ? ToastLevel.Success : ToastLevel.Warning;
            ToastSvc.ShowToast(message, level);

            await LoadProducts();
        }
    }

    private async Task DeleteProduct(int productId)
    {
        var product = await DbContext.Products.FindAsync(productId);
        if (product != null)
        {
            DbContext.Products.Remove(product);
            await DbContext.SaveChangesAsync();

            productList?.RemoveAll(p => p.Id == productId);
            ToastSvc.ShowToast("üóëÔ∏è ƒê√£ x√≥a s·∫£n ph·∫©m th√†nh c√¥ng!", ToastLevel.Info);
            StateHasChanged();
        }
    }
}
