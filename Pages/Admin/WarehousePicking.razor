@page "/admin/warehouse/pick/{OrderId:int}"
@attribute [Authorize(Roles = "Admin, Warehouse")]
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject PickingService PickingSvc
@inject ToastService ToastSvc

<h3>Lấy hàng & Đóng gói cho Đơn hàng #@OrderId</h3>

@if (pickingModel == null)
{
    <LoadingSpinner />
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="picking-list">
                @foreach (var productGroup in pickingModel.PickingProducts)
                {
                    <div class="picking-product-group card mb-3">
                        <div class="card-header bg-light">
                             <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>Sản phẩm: @productGroup.ProductName</strong><br/>
                                    <span>Số lượng cần lấy: @productGroup.RequiredQuantity</span>
                                </div>
                                <div>
                                    <span class="badge @(productGroup.IsFullyPicked ? "bg-success" : "bg-danger")">
                                        Đã chọn lấy: @productGroup.PickedQuantity / @productGroup.RequiredQuantity
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            @foreach (var pick in productGroup.Picks)
                            {
                                <div class="row align-items-center mb-2">
                                    <div class="col-md-5">
                                        <label>Vị trí</label>
                                        <InputSelect class="form-select form-select-sm" @bind-Value="pick.LocationId">
                                            <option value="0">-- Chọn vị trí --</option>
                                            @if(allLocations != null)
                                            {
                                                @foreach (var location in allLocations.Where(l => l.Warehouse != null && l.Warehouse.Name.Contains("Kho Chính")))
                                                {
                                                    <option value="@location.Id">@location.Code (Tồn: @GetStockForLocation(productGroup.ProductId, location.Id))</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="col-md-5">
                                        <label>Số lượng lấy</label>
                                        <InputNumber class="form-control form-control-sm" @bind-Value="pick.QuantityToPick" />
                                    </div>
                                    <div class="col-md-2">
                                        <button class="btn btn-sm btn-danger mt-3" @onclick="() => productGroup.Picks.Remove(pick)">Xóa</button>
                                    </div>
                                </div>
                            }
                             <button class="btn btn-sm btn-outline-primary mt-2" @onclick="() => productGroup.Picks.Add(new PickingAllocationViewModel())">
                                <span class="oi oi-plus"></span> Thêm vị trí lấy hàng
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-success" @onclick="HandleConfirmPicking" disabled="@(!pickingModel.IsReadyToCommit)">
                Xác nhận đã Lấy hàng & Đóng gói
            </button>
            <a href="/admin/warehouse" class="btn btn-secondary">Quay lại</a>
        </div>
    </div>
}

@code {
    [Parameter]
    public int OrderId { get; set; }
    
    private PickingViewModel? pickingModel;
    private List<Location>? allLocations;
    private List<StockLevel>? allStockLevels;

    #region ViewModels
    public class PickingViewModel
    {
        public List<PickingProductViewModel> PickingProducts { get; set; } = new();
        public bool IsReadyToCommit => PickingProducts.All(p => p.IsFullyPicked);
    }

    public class PickingProductViewModel
    {
        public int ProductId { get; set; }
        public string? ProductName { get; set; }
        public int RequiredQuantity { get; set; }
        public List<PickingAllocationViewModel> Picks { get; set; } = new();
        public int PickedQuantity => Picks.Sum(p => p.QuantityToPick);
        public bool IsFullyPicked => PickedQuantity == RequiredQuantity;
    }

    public class PickingAllocationViewModel
    {
        public int LocationId { get; set; }
        public int QuantityToPick { get; set; }
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        // 1. Tải tất cả các vị trí và tồn kho cần thiết một lần duy nhất
        allLocations = await DbContext.Locations.Include(l => l.Warehouse).OrderBy(l => l.Code).ToListAsync();
        allStockLevels = await DbContext.StockLevels.ToListAsync();

        // 2. Lấy gợi ý từ PickingService
        var suggestions = await PickingSvc.GetPickingSuggestionsAsync(OrderId);

        // 3. Chuyển đổi gợi ý thành model để hiển thị trên giao diện
        pickingModel = new PickingViewModel();
        foreach (var suggestion in suggestions)
        {
            var productVM = new PickingProductViewModel
            {
                ProductId = suggestion.ProductId,
                ProductName = suggestion.ProductName,
                RequiredQuantity = suggestion.RequiredQuantity,
                Picks = suggestion.SuggestedPicks.Select(p => new PickingAllocationViewModel
                {
                    LocationId = p.LocationId,
                    QuantityToPick = p.QuantityToPick
                }).ToList()
            };
            pickingModel.PickingProducts.Add(productVM);
        }
    }

    private int GetStockForLocation(int productId, int locationId)
    {
        return allStockLevels?.FirstOrDefault(sl => sl.ProductId == productId && sl.LocationId == locationId)?.Quantity ?? 0;
    }

    private async Task HandleConfirmPicking()
    {
        if (pickingModel == null || !pickingModel.IsReadyToCommit)
        {
            ToastSvc.ShowToast("Vui lòng chọn đủ số lượng cho tất cả sản phẩm.", ToastLevel.Error);
            return;
        }

        foreach (var productGroup in pickingModel.PickingProducts)
        {
            foreach (var pick in productGroup.Picks)
            {
                if (pick.LocationId == 0 || pick.QuantityToPick <= 0) continue;

                var stockLevel = await DbContext.StockLevels.FirstOrDefaultAsync(sl => sl.ProductId == productGroup.ProductId && sl.LocationId == pick.LocationId);
                
                if (stockLevel == null || stockLevel.Quantity < pick.QuantityToPick)
                {
                    ToastSvc.ShowToast($"Không đủ tồn kho cho sản phẩm '{productGroup.ProductName}' tại vị trí đã chọn.", ToastLevel.Error);
                    return;
                }
                
                stockLevel.Quantity -= pick.QuantityToPick;

                var log = new InventoryLog
                {
                    ProductId = productGroup.ProductId,
                    QuantityChange = -pick.QuantityToPick,
                    NewQuantity = stockLevel.Quantity,
                    Reason = $"Xuất hàng cho đơn hàng #{OrderId}"
                };
                DbContext.InventoryLogs.Add(log);
            }
        }
        
        var order = await DbContext.Orders.FindAsync(OrderId);
        if (order != null)
        {
            order.Status = "Sẵn sàng giao hàng";
        }

        await DbContext.SaveChangesAsync();
        ToastSvc.ShowToast("Lấy hàng và đóng gói thành công!", ToastLevel.Success);
        Navigation.NavigateTo("/admin/warehouse");
    }
}

