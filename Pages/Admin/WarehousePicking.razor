@page "/admin/warehouse/pick/{OrderId:int}"
@attribute [Authorize(Roles = "Admin, Warehouse")]
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject PickingService PickingSvc
@inject ToastService ToastSvc
@inject AuthenticationStateProvider AuthProvider

<h3 class="fw-bold text-primary mb-4">
    <i class="bi bi-box-seam me-2"></i>Lấy hàng & Đóng gói cho Đơn hàng #@OrderId
</h3>

@if (pickingModel == null)
{
    <LoadingSpinner />
}
else
{
    <div class="card shadow-sm border-0">
        <div class="card-body">
            @foreach (var productGroup in pickingModel.PickingProducts)
            {
                <div class="card mb-3 border-0 shadow-sm">
                    <div class="card-header bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@productGroup.ProductName</strong><br />
                                <small class="text-muted">Cần lấy: @productGroup.RequiredQuantity</small>
                            </div>
                            <div>
                                <span class="badge @(productGroup.IsFullyPicked ? "bg-success" : "bg-danger")">
                                    @($"Đã chọn {productGroup.PickedQuantity}/{productGroup.RequiredQuantity}")
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="card-body">
                        @foreach (var pick in productGroup.Picks)
                        {
                            <div class="row align-items-center mb-2">
                                <div class="col-md-5">
                                    <label class="form-label fw-semibold">Vị trí</label>
                                    <InputSelect class="form-select form-select-sm" @bind-Value="pick.LocationId">
                                        <option value="0">-- Chọn vị trí --</option>
                                        @if (allLocations != null)
                                        {
                                            @foreach (var location in allLocations)
                                            {
                                                <option value="@location.Id">
                                                    @location.Code (@location.Warehouse!.Name) - Tồn: @GetStockForLocation(productGroup.ProductId, location.Id)
                                                </option>
                                            }
                                        }
                                    </InputSelect>
                                </div>

                                <div class="col-md-5">
                                    <label class="form-label fw-semibold">Số lượng lấy</label>
                                    <InputNumber class="form-control form-control-sm" @bind-Value="pick.QuantityToPick" />
                                </div>

                                <div class="col-md-2 text-end mt-3">
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => productGroup.Picks.Remove(pick)">
                                        Xoá
                                    </button>
                                </div>
                            </div>
                        }

                        <button class="btn btn-sm btn-outline-primary mt-2" @onclick="() => productGroup.Picks.Add(new PickingAllocationViewModel())">
                            <i class="bi bi-plus-circle me-1"></i>Thêm vị trí lấy
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="card-footer text-end">
            <button class="btn btn-success me-2" @onclick="HandleConfirmPicking" disabled="@(!pickingModel.IsReadyToCommit)">
                <i class="bi bi-check-circle me-1"></i>Xác nhận đã Lấy hàng & Đóng gói
            </button>
            <a href="/admin/warehouse" class="btn btn-secondary">
                <i class="bi bi-arrow-left-circle me-1"></i>Quay lại
            </a>
        </div>
    </div>
}

@code {
    [Parameter] public int OrderId { get; set; }

    private PickingViewModel? pickingModel;
    private List<Location>? allLocations;
    private List<StockLevel>? allStockLevels;

    #region ViewModels
    public class PickingViewModel
    {
        public List<PickingProductViewModel> PickingProducts { get; set; } = new();
        public bool IsReadyToCommit => PickingProducts.All(p => p.IsFullyPicked);
    }

    public class PickingProductViewModel
    {
        public int ProductId { get; set; }
        public string? ProductName { get; set; }
        public int RequiredQuantity { get; set; }
        public List<PickingAllocationViewModel> Picks { get; set; } = new();
        public int PickedQuantity => Picks.Sum(p => p.QuantityToPick);
        public bool IsFullyPicked => PickedQuantity == RequiredQuantity;
    }

    public class PickingAllocationViewModel
    {
        public int LocationId { get; set; }
        public int QuantityToPick { get; set; }
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        allLocations = await DbContext.Locations.Include(l => l.Warehouse).OrderBy(l => l.Code).ToListAsync();
        allStockLevels = await DbContext.StockLevels.ToListAsync();

        var suggestions = await PickingSvc.GetPickingSuggestionsAsync(OrderId);

        pickingModel = new PickingViewModel();
        foreach (var suggestion in suggestions)
        {
            var productVM = new PickingProductViewModel
            {
                ProductId = suggestion.ProductId,
                ProductName = suggestion.ProductName,
                RequiredQuantity = suggestion.RequiredQuantity,
                Picks = suggestion.SuggestedPicks.Select(p => new PickingAllocationViewModel
                {
                    LocationId = p.LocationId,
                    QuantityToPick = p.QuantityToPick
                }).ToList()
            };
            pickingModel.PickingProducts.Add(productVM);
        }
    }

    private int GetStockForLocation(int productId, int locationId)
    {
        return allStockLevels?.FirstOrDefault(sl => sl.ProductId == productId && sl.LocationId == locationId)?.Quantity ?? 0;
    }

    private async Task HandleConfirmPicking()
    {
        if (pickingModel == null || !pickingModel.IsReadyToCommit)
        {
            ToastSvc.ShowToast("⚠️ Vui lòng chọn đủ số lượng cho tất cả sản phẩm.", ToastLevel.Warning);
            return;
        }

        // ✅ Lấy người thao tác hiện tại
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User?.Identity?.Name ?? "Không rõ";

        foreach (var productGroup in pickingModel.PickingProducts)
        {
            foreach (var pick in productGroup.Picks)
            {
                if (pick.LocationId == 0 || pick.QuantityToPick <= 0)
                    continue;

                var stockLevel = await DbContext.StockLevels
                    .Include(sl => sl.Location)!.ThenInclude(l => l.Warehouse)
                    .FirstOrDefaultAsync(sl => sl.ProductId == productGroup.ProductId && sl.LocationId == pick.LocationId);

                if (stockLevel == null || stockLevel.Quantity < pick.QuantityToPick)
                {
                    ToastSvc.ShowToast($"❌ Không đủ tồn kho cho '{productGroup.ProductName}' tại vị trí đã chọn.", ToastLevel.Error);
                    return;
                }

                int oldQty = stockLevel.Quantity;
                stockLevel.Quantity -= pick.QuantityToPick;

                // ✅ Ghi log tồn kho chi tiết (để InventoryHistory hiển thị đúng)
                DbContext.InventoryLogs.Add(new InventoryLog
                {
                    ProductId = productGroup.ProductId,
                    QuantityChange = -pick.QuantityToPick,
                    NewQuantity = stockLevel.Quantity,
                    Timestamp = DateTime.Now,
                    Reason =
                        $"Loại:Xuất hàng | " +
                        $"Kho:{stockLevel.Location!.Warehouse!.Name} | " +
                        $"Vị trí:{stockLevel.Location.Code} | " +
                        $"User:{userEmail} | " +
                        $"Tồn cũ:{oldQty} | " +
                        $"Ghi chú:Đóng gói đơn hàng #{OrderId}"
                });
            }
        }

        // ✅ Cập nhật trạng thái đơn hàng
        var order = await DbContext.Orders.FindAsync(OrderId);
        if (order != null)
        {
            order.Status = "Sẵn sàng giao hàng";
        }

        await DbContext.SaveChangesAsync();
        ToastSvc.ShowToast("✅ Đã cập nhật tồn kho & ghi vào lịch sử!", ToastLevel.Success);
        Navigation.NavigateTo("/admin/warehouse");
    }
}
